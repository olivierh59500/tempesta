#
# Tempesta FW configuration file.
# 

# TAG: sched.
#
# Specifies the scheduler used to distribute load among servers
#
# Syntax:
#   sched SCHED_NAME;
#
# Currently recognized schedulers are:
# - hash
# - round-robin
#
# If not specified, SCHED_NAME defaults to round-robin.
#
# The specified scheduler affects all server definitions that are missing
# a scheduler definition. If a srv_group is missing a scheduler definition,
# and a scheduler is specified, then that scheduler is set for the group.
# Also, if servers outside of any groups are specified, then they form
# a special group, and the specified scheduler is assigned to that group.
#
# Multiple "sched" directives may be specified in the configuration file.
# Each directive affects servers groups that follow it.
#

# TAG: server.
#
# Specifies an IP address/port of a back-end HTTP server.
#
# Syntax:
#   server IPADDR[:PORT] [conns_n=N]
#
# IPADDR may be either IPv4 or IPv6 address, hostnames are not allowed.
# IPv6 address must be enclosed in square brackets (e.g. "[::0]" but not "::0").
# PORT defaults to 80 if not set.
#
# conns_n=N is the number of parallel connections to the server.
# The N defaults to 4 if not set.
#
# Multiple back-end servers may be specified, for example:
#   server 10.1.0.1:80
#   server [fc00::1]:80;
#

# TAG: srv_group
#
# Groups multiple backend servers into a single unit of load balancing.
# All backend servers within a group are treated as interchangeable.
# The load is distributed evenly over all servers within a single group.
# If some server goes offline, other members of the group take its load.
#
# Syntax:
#   srv_group NAME [sched=SCHED_NAME] {
#       server IPADDR[:PORT] [conns_n=N];
#       ...
#   }
#
# NAME is a unique identifier of the group that may be used to refer it later.
#
# SCHED_NAME is a name of a scheduler module that distributes load among servers
# within the group. There are three schedulers available:
#   - "round-robin" (default) - rotates all servers in the group in
#     the round-robin manner, so requests are distributed uniformely across
#     servers.
#   - "hash" - chooses a server based on a URI/Host hash of a request.
#     Requests are still distributed uniformely, but a request with the same
#     URI/Host is always sent to the same server.
#
# Note that HTTP scheduler dispatches message among server groups only and
# round-robin or hash scheduler must be used to select a server in a group.
#
# IPADDR[:PORT] is the IPv4 or IPv6 address of the server (see: server).
# conns_n=N is the number of parallel connections to the server (see: server).
#
# Examples:
#   srv_group static_storage sched=hash {
#       server 10.10.0.1:8080;
#       server 10.10.0.2:8080;
#       server [fc00::3]:8081 conns_n=1;
#   }
#
# Default:
#   There is a special group called "default". All "server" entries defined
#   outside an "srv_group" added to the default group implicitly.

# TAG: sched_http_rules
#
# The HTTP scheduler content-based load balancing rules.
# The HTTP load balancer is instructed to send HTTP requests to a group of
# servers based on the contents of an HTTP request field, such as URI, Host,
# headers, etc.
#
# Syntax:
#   sched_http_rules {
#       match GROUP FIELD OP ARG;
#       ...
#   }
#
# GROUP is the reference to a previously defined 'srv_group'.
# FIELD is an HTTP request field such as uri, host, etc.
# OP is a string comparison operator such as eq, prefix, etc.
# ARG is an argument for the OP operator such as "/foo/bar.html",
# "example.com", etc.
#
# A "match" entry is a single instruction for the load balancer that says:
# take the FIELD of http request, compare it with ARG using OP. If they match,
# then send the request to the specified GROUP.
#
# For every HTTP request, the load balancer executes all "match" instructions
# sequentially until it finds a match. If no match is found, then the request
# is dropped.
#
# Supported FIELD keywords:
#   - uri
#       Only a part of URI is looked at that contains the path and the query
#       string if any (e.g. "/abs/path.html?query&key=val#fragment").
#   - host
#       The host part from URI in HTTP request line, or the value of Host
#       header field. The Host part in URI takes priority over the Host header
#       field value.
#   - hdr_host
#       The value of the "Host" header field.
#   - hdr_conn
#       The value of the "Connection" header field.
#   - hdr_raw
#       The contents of any other HTTP header field as specified by ARG.
#       ARG must include contents of an HTTP header starting with the header
#       field name. The suffix OP is not supported for this FIELD. Processing
#       of hdr_raw may be slow as it requires walking over all headers of an
#       HTTP request.
#
# Supported OP keywords (comparison operations):
#   - eq - FIELD is fully equal to the string specified in ARG.
#   - prefix - FIELD starts with the string specified in ARG.
#   - suffix - FIELD ends with the string specified in ARG.
#
# Example:
#   srv_group static { ... }
#   srv_group foo_app { ... }
#   srv_group bar_app { ... }
#
#   sched_http_rules {
#       match static   uri       prefix  "/static";
#       match static   uri       suffix  ".php";
#       match static   host      prefix  "static.";
#       match static   host      suffix  "tempesta-tech.com";
#       match foo_app  host      eq      "foo.example.com";
#       match bar_app  hdr_conn  eq      "keep-alive";
#       match bar_app  hdr_host  prefix  "bar.";
#       match bar_app  hdr_host  suffix  "natsys-lab.com";
#       match bar_app  hdr_host  eq      "bar.natsys-lab.com";
#       match bar_app  hdr_raw   prefix  "X-Custom-Bar-Hdr: ";
#   }
#
# Also, there's a special default match rule that matches any request.
# If specified, the default rule must come last in the list of rules.
# All requests that didn't match any rule are routed to the server group
# specified in the default rule.
# If the default match rule is not defined, and there's the default group
# with servers defined outside of any group, then the default rule is
# added implicitly to route requests to the default group.
#
# Syntax:
#     match GROUP * * *
#
# Default:
#   No rules defined. If there's the default group, then the default match
#   rule is added to route HTTP requests to the "default" group. Otherwise,
#   the request doesn't match any rule, and is dropped.
#

# TAG: keepalive_timeout
#
# Syntax:
#   keepalive_timeout TIMEOUT
#
# TIMEOUT is a timeout in seconds during which a keep-alive client connection
# will stay open in Tempesta. The zero value disables keep-alive client
# connections.
#
# Default:
#   keepalive_timeout 75;

# TAG: listen
# 
# Tempesta FW listening address.
#
# Syntax:
#   listen PORT | IPADDR[:PORT] [proto=http|https]
#
# IPADDR may be either an IPv4 or IPv6 address, no host names allowed.
# IPv6 address must be enclosed in square brackets (e.g. "[::0]" but not "::0").
#
# If only PORT is given, then the address 0.0.0.0 (but not [::1]) is used.
# If only IPADDR is given, then the default HTTP port 80 is used.
#
# It is allowed to specify the type of listening socket via the "proto". At
# the moment HTTP and HTTPS protos are supported. If no "proto" option was
# given, then HTTP is supposed by the default.
#
# Tempesta FW opens one socket for each 'listen' entry, so it may be repeated
# to listen on multiple addresses/ports. For example:
#   listen 80;
#   listen 443 proto=https;
#   listen [::0]:80;
#   listen 127.0.0.1:8001;
#   listen [::1]:8001;
#
# Default:
#   listen 80;

# TAG: ssl_certificate
# TAG: ssl_certificate_key
#
# Provides the necessary support for HTTPS.
#
# Syntax:
#  ssl_certificate file;
#
# Specifies a file with the certificate in the PEM format.
#
# Syntax:
#  ssl_certificate_key file;
#
# Specifies a file with the secret key in the PEM format.

# TAG: cache
#
# Web content caching mode:
#   0 - no caching, pure proxying mode;
#   1 - sharding, each NUMA node contains independent shard of whole cache.
#       This mode has the smallest memory requirements;
#   2 - replicated, each NUMA node has whole replica of the cache.
#       It requires more RAM, but delivers the highest performance.
#       This is default mode.
#
# Syntax:
#   cache [0-2]
#
# Default:
#   cache 2;

# TAG: cache_db
# 
# Path to a cache database used as a storage for Tempesta FW Web cache.
#
# Syntax:
#   cache_db PATH
#
# The PATH must be absolute and the directory must exist.
# Also, the PATH should not end with a slash (e.g. "/foo/bar/").
#
# Spaces and other special characters must be escaped with a backslash.
# Alternatively, the whole path may be enclosed to double quotes.
# For example:
#   cache_db /var/foo\ bar\ baz/cache.tdb;
#   cache_db "/var/weird !;% name/foo.tdb";
#
# Default:
#   cache_db /opt/tempesta/db/cache.tdb;

# TAG: cache_size
#
# Size of file(s) created by Tempesta FW within cache_dir.
#
# Syntax:
#   cache_size SIZE
#
# SIZE is specified in bytes, suffixes like 'MB' are not supported yet.
# Also, the number must be a multiple of 2MB (Tempesta DB extent size).
#
# Default:
#   cache_size 268435456;  # 256MB

# TAG: cache_bypass
#
# Bypass cache. Do not serve a request from cache. Do not store the
# response to that request in cache.
#
# Syntax:
#   cache_bypass <OP> <string>;
#
# <OP> is a match operator, one of "eq", "prefix", "suffix", or "*".
# <string> is a verbatim string matched against URL in a request.
#
# Default:
#   None.

# TAG: cache_fulfill
#
# Use cache. Serve a request from cache. If the response is not in cache,
# then forward it to a back end server, and store the response in cache.
# Update the cached response when necessary.
#
# Syntax:
#   cache_fulfill <OP> <string>;
#
# <OP> is a match operator, one of "eq", "prefix", "suffix", or "*".
# <string> is a verbatim string matched against URL in a request.
#
# Default:
#   None.

# TAG: location
#
# Group of directives applied to specific location defined my a string
# and a match operator. Matching is done against URL in a request.
#
# Syntax:
#   location <OP> <string> {
#       <directive>;
#       ...
#       <directive>;
#   }
#
# <OP> is a match operator, one of "eq", "prefix", "suffix", or "*".
# <string> is a verbatim string matched against URL in a request.
# <directive> is one of "cache_bypass", "cache_fulfill".
#
# Default:
#   None.

# TAG: filter_db
#
# Path to a filter database file used as a storage for Tempesta FW filter rules.
# The same as cache_db.
#
# Default:
#   filter_db /opt/tempesta/db/filter.tdb;

# TAG: drop_tbl_size
#
# Size of filter drop table.
#
# Syntax:
#   filter_tbl_size SIZE
#
# Default:
#   filter_tbl_size 16777216;  # 16MB

# TAG: sticky
#
# Tempesta sticky cookie.
#
# Syntax:
#   sticky [name=<COOKIE_NAME>] [enforce]
#
# Default:
#   Tempesta sticky cookie is not used.
#
# COOKIE_NAME is the name of Tempesta sticky cookie is used in HTTP
# requests that pass through Tempesta. When not specified explicitly,
# a default name is used.
#
# enforce - enforce the use of Tempesta sticky cookie in all HTTP
# requests that come to Tempesta. If Tempesta sticky cookie is not
# found in an HTTP request, a client get an HTTP 302 response that
# redirects the client to the same URI, and prompts that Tempesta
# sticky cookie is set in the request.
#
# Examples:
#   sticky;		# Enable sticky cookie with default name.
#   sticky enforce;	# Enforce sticky cookie with default name.
#   sticky name=__cookie__ enforce;

# TAG: sticky_secret
#
# Secret string for sticky cookie.
#
# Syntax:
#   sticky_secret <string>
#
# Default:
#   Random bytes.
#
# This is secret (key) used for HMAC calculation for Sticky cookie value.
# It's desirable to keep this value in secret to prevent automatic cookies
# generation on attacker side. By default Tempesta generates a new random
# value for the secret on start. This means that all user HTTP sessions are
# invalidated on Tempesta restart. Maximum length of the key is 20 bytes.
#
# Example:
#   sticky_secret "f00)9eR59*_/22";

# TAG: sess_lifetime
#
# HTTP session life time in seconds. Zero value means unlimited life time.
# This option doesn't affect sticky cookie expire time - it's a session,
# temporal, cookie.
#
# Syntax:
#   sess_lifetime NUM;
#
# Default:
#   0
#
# Example:
#   sess_lifetime 900;

#
# Frang configuration.
#
# TAG: frang_limits
#
# The section containing static limits for the classifier.
#
# Syntax:
#   frang_limits {
#	request_rate NUM;
#	request_burst NUM;
#	connection_rate NUM;
#	connection_burst NUM;
#	concurrent_connections NUM;
#	client_header_timeout NUM;
#	client_body_timeout NUM;
#	http_uri_len NUM;
#	http_field_len NUM;
#	http_body_len NUM;
#	http_host_required true|false;
#	http_methods [METHOD]...;
#	http_ct_required true|false;
#	http_ct_vals ["CONTENT_TYPE"]...;
#  }
#
#  - options with names *_rate define requests/connections rate per second.
#  - *_burst are temporal burst for 1/FRANG_FREQ of second.
#  - http_* are static limits for contents of an HTTP request.
#
# Example:
#    frang_limits {
#        request_rate 20;
#        request_burst 15;
#        connection_rate 8;
#        connection_burst 6;
#        concurrent_connections 8;
#        client_header_timeout 20;
#        client_body_timeout 10;
#        http_uri_len 1024;
#        http_field_len 256;
#        http_ct_required false;
#        http_methods get post head;
#        http_ct_vals "text/plain" "text/html";
#        http_header_chunk_cnt 10;
#        http_body_chunk_cnt 0;
#   }
#
# Default:
#   All limits are disabled (the values are set to zero/false/empty).


